{"persistifyArgs":{"cache":{"C:\\work\\cocos-2d\\start_project\\library\\imports\\ab\\ab41d2d0-b45e-4548-9521-7a9f6aafe2bd.js":{"source":"\"use strict\";\ncc._RF.push(module, 'ab41dLQtF5FSJUhep9qr+K9', 'player');\n// script/player.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n    // Player.js\n    //...\n    properties: {\n        // 主角跳跃高度\n        jumpHeight: 0,\n        // 主角跳跃持续时间\n        jumpDuration: 0,\n        // 最大移动速度\n        maxMoveSpeed: 0,\n        // 加速度\n        accel: 0\n    },\n    //...\n    setJumpAction: function setJumpAction() {\n        // 跳跃上升\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // 下落\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // 不断重复\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown));\n    },\n    setInputControl: function setInputControl() {\n        var self = this;\n        // 添加键盘事件监听\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            // 有按键按下时，判断是否是我们指定的方向控制键，并设置向对应方向加速\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                }\n            },\n            // 松开按键时，停止向该方向的加速\n            onKeyReleased: function onKeyReleased(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accRight = false;\n                        break;\n                }\n            }\n        }, self.node);\n    },\n    // use this for initialization\n    onLoad: function onLoad() {\n        // 初始化跳跃动作\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        // 加速度方向开关\n        this.accLeft = false;\n        this.accRight = false;\n        // 主角当前水平方向速度\n        this.xSpeed = 0;\n\n        // 初始化键盘输入监听\n        this.setInputControl();\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        // 根据当前加速度方向每帧更新速度\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // 限制主角的速度不能超过最大值\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            // if speed reach limit, use max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // 根据当前速度更新主角的位置\n        this.node.x += this.xSpeed * dt;\n    }\n});\n\ncc._RF.pop();","deps":{}},"C:\\work\\cocos-2d\\start_project\\library\\imports\\c5\\c571f4b9-12ce-4129-8458-446ef9faa7aa.js":{"source":"\"use strict\";\ncc._RF.push(module, 'c571fS5Es5BKYRYRG75+qeq', 'game');\n// script/game.js\n\n'use strict';\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        // 星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        // 地面节点，用于确定星星生成的高度\n        ground: {\n            default: null,\n            type: cc.Node\n        },\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            default: null,\n            type: cc.Node\n        },\n        scoreDisplay: {\n            default: null,\n            type: cc.Label\n        }\n    },\n\n    // use this for initialization\n    // Game.js\n    onLoad: function onLoad() {\n        // 获取地平面的 y 轴坐标\n        this.groundY = this.ground.y + this.ground.height / 2;\n        // 生成一个新的星星\n\n        this.starDuration = 0;\n        this.spawnNewStar();\n        this.score = 0;\n    },\n\n    spawnNewStar: function spawnNewStar() {\n        // 使用给定的模板在场景中生成一个新节点\n        var newStar = cc.instantiate(this.starPrefab);\n        // 将新增的节点添加到 Canvas 节点下面\n        this.node.addChild(newStar);\n        newStar.getComponent('star').game = this;\n        // 为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition());\n        this.starDuration = this.minStarDuration + cc.random0To1() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n\n    getNewStarPosition: function getNewStarPosition() {\n        var randX = 0;\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\n        var randY = this.groundY + cc.random0To1() * this.player.getComponent('player').jumpHeight + 50;\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\n        var maxX = this.node.width / 2;\n        randX = cc.randomMinus1To1() * maxX;\n        // 返回星星坐标\n        return cc.p(randX, randY);\n    },\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n    gameOver: function gameOver() {\n        this.player.stopAllActions(); //停止 player 节点的跳跃动作\n        cc.director.loadScene('game');\n    },\n    gainScore: function gainScore() {\n        this.score += 1;\n        // 更新 scoreDisplay Label 的文字\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\n    }\n});\n\ncc._RF.pop();","deps":{}},"C:\\work\\cocos-2d\\start_project\\library\\imports\\8c\\8c59e44e-196e-4530-94ea-30e3e7512714.js":{"source":"\"use strict\";\ncc._RF.push(module, '8c59eROGW5FMJTqMOPnUScU', 'star');\n// script/star.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        pickRadius: 0\n        // ...\n    },\n    getPlayerDistance: function getPlayerDistance() {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n\n    onPicked: function onPicked() {\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n        this.game.gainScore();\n        // 然后销毁当前星星节点\n        this.node.destroy();\n    },\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            this.onPicked();\n            return;\n        }\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    }\n});\n\ncc._RF.pop();","deps":{}}},"packageCache":{"C:\\work\\cocos-2d\\start_project\\assets\\script\\package.json":false,"C:\\work\\cocos-2d\\start_project\\assets\\package.json":false,"C:\\work\\cocos-2d\\start_project\\package.json":false,"C:\\work\\cocos-2d\\package.json":false,"C:\\work\\package.json":false,"C:\\package.json":false,"C:\\work\\cocos-2d\\start_project\\assets\\script\\NewScript.js":false,"C:\\work\\cocos-2d\\start_project\\library\\imports\\ab\\package.json":false,"C:\\work\\cocos-2d\\start_project\\library\\imports\\package.json":false,"C:\\work\\cocos-2d\\start_project\\library\\package.json":false,"C:\\work\\cocos-2d\\start_project\\library\\imports\\ab\\ab41d2d0-b45e-4548-9521-7a9f6aafe2bd.js":{"__dirname":"C:\\work\\cocos-2d\\start_project\\library\\imports\\ab"},"C:\\work\\cocos-2d\\start_project\\assets\\script\\player.js":false,"C:\\work\\cocos-2d\\start_project\\assets\\NewScript.js":false,"C:\\work\\cocos-2d\\start_project\\library\\imports\\8c\\package.json":false,"C:\\work\\cocos-2d\\start_project\\library\\imports\\8c\\8c59e44e-196e-4530-94ea-30e3e7512714.js":{"__dirname":"C:\\work\\cocos-2d\\start_project\\library\\imports\\8c"},"C:\\work\\cocos-2d\\start_project\\assets\\star.js":false,"C:\\work\\cocos-2d\\start_project\\assets\\script\\star.js":false,"C:\\work\\cocos-2d\\start_project\\library\\imports\\c5\\package.json":false,"C:\\work\\cocos-2d\\start_project\\library\\imports\\c5\\c571f4b9-12ce-4129-8458-446ef9faa7aa.js":{"__dirname":"C:\\work\\cocos-2d\\start_project\\library\\imports\\c5"},"C:\\work\\cocos-2d\\start_project\\assets\\game.js":false,"C:\\work\\cocos-2d\\start_project\\assets\\script\\game.js":false}}}